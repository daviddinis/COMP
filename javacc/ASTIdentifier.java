
/* Generated By:JJTree: Do not edit this line. ASTIdentifier.java Version 6.1 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=false,TRACK_TOKENS=false,NODE_PREFIX=AST,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
import java.io.*;
public class ASTIdentifier extends SimpleNode implements ASTType{
  public ASTIdentifier(int id) {
    super(id);
  }

  public ASTIdentifier(Parser p, int id) {
    super(p, id);
  }

  public String getType(){
    return "" + jjtGetValue();
  }

  public String getName(){
    return "" + jjtGetValue();
  }

  public String analyzeType(SymbolTable table) {
    analyzeSemantics(table);
    Symbol id = table.getSymbol(getName());
    if (id == null) {
      return "";
    }
    return id.getType();
  }

  public void analyzeSemantics(SymbolTable symbolTable){
    if (symbolTable.getSymbol(getName()) == null) {
      System.err.println("variable " + getName() + " in line " + getLine() +" is not declared");
    }
  }

  public boolean isMethodScoped() {
    return true;
  }

  public boolean isScoped() {
    SimpleNode child = this;
    SimpleNode parent;
    do {
      parent = (SimpleNode) child.jjtGetParent();
      if (parent instanceof ASTIf || parent instanceof ASTWhile) {
        return true;
      }
      child = parent;
    } while (!(parent instanceof ASTMethod || parent instanceof ASTMainMethod));
    return false;
  }

  public void initialize(SymbolTable table) {
    Symbol id = table.getSymbol(getName());
    if (id != null) {
      if (id.getAccess() == Symbol.Access.local && isScoped()) {
          id.scopeInitialize();
      } else {
          id.initialize();
      }
    }
  }

  public boolean isInitialized(SymbolTable table) {
    if (Parser.varInitIgnore) {
      return true;
    }
    Symbol id = table.getSymbol(getName());
    if (id != null) {
      if (!id.isInitialized() && id.isScopeInitialized() && id.getAccess() != Symbol.Access.global) {
        System.out.println("Warning: The variable " + id.getId() + " might not be initialized when used in line " + getLine());
      }
      return id.isInitialized() || id.isScopeInitialized() || id.getAccess() == Symbol.Access.global;
    }
    // return error 
    return false;
  }


  public int generateCode(SymbolTable table, PrintWriter print){

    String type = this.analyzeType(table);
    if(table.getSymbol(this.getName()).getAccess() == Symbol.Access.global){
      String className = Parser.getInstance().className;
      print.println("\taload_0");
      print.print("\tgetfield ");

      print.println(className + "/_" + this.getName() + " "+ CodeGenerator.smallTypeFromString(type));
    }
    else if( ((type).equals("Int")) || ((type).equals("Bool")) ){
      print.print("\tiload ");
      print.println(table.getTablePosition(this.getName()));
    }
    else{
      print.print("\taload ");
      print.println(table.getTablePosition(this.getName()));
    }

    return 1;

  }

}
/* JavaCC - OriginalChecksum=75abfe948da46b0c7b3a59b2cae3a666 (do not edit this line) */

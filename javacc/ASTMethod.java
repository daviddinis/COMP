/* Generated By:JJTree: Do not edit this line. ASTMethod.java Version 6.1 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=false,TRACK_TOKENS=false,NODE_PREFIX=AST,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
public class ASTMethod extends SimpleNode {
  public ASTMethod(int id) {
    super(id);
  }

  public ASTMethod(Parser p, int id) {
    super(p, id);
  }

  public void createSymbolTable(SymbolTable symbolTable) {

    if (children == null)
      return;

    SymbolTable newTable = new SymbolTable(symbolTable);

    String methodName = ((SimpleNode) children[1]).name + "(";

    for (int i = 0; i < children.length; i++) {
      if (children[i] instanceof ASTArgument) {
        for (int k = 0; k<((ASTArgument) children[i]).children.length; k++ ){
          methodName += ((ASTType) ((ASTArgument) children[i]).children[k]).getType();
          if (k != ((ASTArgument) children[i]).children.length-1)
          methodName += ",";
        }
      }
    }
    methodName += ")";

    newTable.setReturnType(((ASTType) children[0]).getType());
    Parser.getInstance().addMethod(methodName, newTable);
    this.table = newTable;

    for (int i = 0; i < children.length; i++) {
      ((SimpleNode) children[i]).createSymbolTable(newTable);
    }
  }

  public void analyzeSemantics(SymbolTable table) {
    for (int i = 0; i < children.length; i++) {
      ((SimpleNode) children[i]).analyzeSemantics(this.table);
    }
  }
}
/*
 * JavaCC - OriginalChecksum=e01bdf01dd9e8aa606ef225a59a26df3 (do not edit this
 * line)
 */

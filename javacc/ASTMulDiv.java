/* Generated By:JJTree: Do not edit this line. ASTMulDiv.java Version 6.1 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=false,TRACK_TOKENS=false,NODE_PREFIX=AST,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
import java.io.*;
public
class ASTMulDiv extends SimpleNode {
  public ASTMulDiv(int id) {
    super(id);
  }

  public ASTMulDiv(Parser p, int id) {
    super(p, id);
  }

  public String analyzeType(SymbolTable table) {
    String type1 = ((SimpleNode)children[0]).analyzeType(table);
    String type2 = ((SimpleNode)children[1]).analyzeType(table);
    if(type1.equals("Int") && type2.equals("Int")) {
      return "Int";
    }
    else return "";
  }

  public boolean isInitialized(SymbolTable table) {
    return ((SimpleNode)children[0]).isInitialized(table) && ((SimpleNode)children[1]).isInitialized(table); 
  }

  public int generateCode(SymbolTable table, PrintWriter print){

    String operation = getOperator();

    SimpleNode left = ((SimpleNode) children[0]);
    SimpleNode right = ((SimpleNode) children[1]);
    
    int stackLeft = left.generateCode(table, print);
    int stackRight = right.generateCode(table, print);
    int bigger = Math.max(stackLeft, stackRight);
    int smaller = min(stackLeft, stackRight);
    int stackSize = Math.max(bigger, smaller+1);
    
    switch(operation){
      case "*":
        print.println("\timul");
        break;

      case "/":
        print.println("\tidiv");
        break;
    }

    return stackSize;
  }
  
}
/* JavaCC - OriginalChecksum=c029eb6960985b765c4a1e603e37ffbe (do not edit this line) */

/* Generated By:JJTree: Do not edit this line. ASTfunction.java Version 6.1 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=false,TRACK_TOKENS=false,NODE_PREFIX=AST,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
public class ASTfunction extends SimpleNode {
  public ASTfunction(int id) {
    super(id);
  }

  public ASTfunction(Parser p, int id) {
    super(p, id);
  }

  public String analyzeType(SymbolTable table) {
    if (((ASTIdentifier)children[0]).getName() == "this" || table.getSymbol(((ASTIdentifier)children[0]).getName()).getType() == Parser.getInstance().className) {
      String methodName = ((ASTIdentifier)children[1]).getName();
      methodName += "(";
      for(int i = 0; i< ((ASTArgumentCall)children[2]).children.length; i++){
        methodName += ((SimpleNode)((ASTArgumentCall)children[2]).children[i]).analyzeType(table);
        if (i != ((ASTArgumentCall)children[2]).children.length-1)
        methodName += ",";
      }
      methodName += ")";

      if (Parser.getInstance().getTable(methodName) != null){
        return Parser.getInstance().getTable(methodName).getReturnType();
      }
      else if(Parser.getInstance().extend != null && Parser.getInstance().getTable(Parser.getInstance().extend + "." + methodName)!= null){
        return Parser.getInstance().getTable(Parser.getInstance().extend + "." + methodName).getReturnType();
      }else
      return "";
    }else{
      String methodName = ((ASTIdentifier)children[0]).getName() + ".";
      methodName += ((ASTIdentifier)children[1]).getName() + "(";
      for(int i = 0; i< ((ASTArgumentCall)children[2]).children.length; i++){
        methodName += ((SimpleNode)((ASTArgumentCall)children[2]).children[i]).analyzeType(table);
        if (i != ((ASTArgumentCall)children[2]).children.length-1)
        methodName += ",";
      }
      methodName += ")";
      if (Parser.getInstance().getTable(methodName) != null){
        return Parser.getInstance().getTable(methodName).getReturnType();
      }else{
        return "";
      }
    }

  }

  public void analyzeSemantics(SymbolTable table) {
    for (int i = 0; i < children.length; i++) {
      ((SimpleNode) children[i]).analyzeSemantics(table);
    }
  }
}
/*
 * JavaCC - OriginalChecksum=e32282036d533f98d2bbaf06ba78b738 (do not edit this
 * line)
 */

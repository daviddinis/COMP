/* Generated By:JJTree: Do not edit this line. ASTfunction.java Version 6.1 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=false,TRACK_TOKENS=false,NODE_PREFIX=AST,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
public class ASTfunction extends SimpleNode {
  public ASTfunction(int id) {
    super(id);
  }

  public ASTfunction(Parser p, int id) {
    super(p, id);
  }

  public String analyzeType(SymbolTable table) {
    Boolean primeiro = ((SimpleNode) children[0]).analyzeType(table).equals("this");
    Boolean segundo = ((SimpleNode) children[0]).analyzeType(table).equals(Parser.getInstance().className);
    if (primeiro || segundo) {
      String methodName = ((ASTIdentifier) children[1]).getName();
      methodName += "(";
      if (((ASTArgumentCall) children[2]).children != null) {
        for (int i = 0; i < ((ASTArgumentCall) children[2]).children.length; i++) {
          methodName += ((SimpleNode) ((ASTArgumentCall) children[2]).children[i]).analyzeType(table);
          if (i != ((ASTArgumentCall) children[2]).children.length - 1)
            methodName += ",";
        }
      }
      methodName += ")";
      if (Parser.getInstance().getTable(methodName) != null) {
        return Parser.getInstance().getTable(methodName).getReturnType();
      } else if (Parser.getInstance().extend != null
          && Parser.getInstance().getTable(Parser.getInstance().extend + "." + methodName) != null) {
        return Parser.getInstance().getTable(Parser.getInstance().extend + "." + methodName).getReturnType();
      } else
        System.out.println("Function call " + methodName + " is not valid");
        return "";
    } else {
      String methodName = ((SimpleNode) children[0]).analyzeType(table) + ".";
      methodName += ((ASTIdentifier) children[1]).getName() + "(";
      if (((ASTArgumentCall) children[2]).children != null) {
        for (int i = 0; i < ((ASTArgumentCall) children[2]).children.length; i++) {
          methodName += ((SimpleNode) ((ASTArgumentCall) children[2]).children[i]).analyzeType(table);
          if (i != ((ASTArgumentCall) children[2]).children.length - 1)
            methodName += ",";
        }
      }
      methodName += ")";
      if (Parser.getInstance().getTable(methodName) != null) {
        return Parser.getInstance().getTable(methodName).getReturnType();
      } else {
        System.out.println("Function call " + methodName + " is not valid");
        return "";
      }
    }
  }

  public boolean isInitialized(SymbolTable table) {
    return true;
  }

  public void analyzeSemantics(SymbolTable table) {
    Boolean primeiro = ((SimpleNode) children[0]).analyzeType(table).equals("this");
    Boolean segundo = ((SimpleNode) children[0]).analyzeType(table).equals(Parser.getInstance().className);
    if (primeiro || segundo) {
      String methodName = ((ASTIdentifier) children[1]).getName();
      methodName += "(";
      if (((ASTArgumentCall) children[2]).children != null) {
        for (int i = 0; i < ((ASTArgumentCall) children[2]).children.length; i++) {
          methodName += ((SimpleNode) ((ASTArgumentCall) children[2]).children[i]).analyzeType(table);
          if (i != ((ASTArgumentCall) children[2]).children.length - 1)
            methodName += ",";
        }
      }
      methodName += ")";
      if (Parser.getInstance().getTable(methodName) != null) {
       
      } else if (Parser.getInstance().extend != null
          && Parser.getInstance().getTable(Parser.getInstance().extend + "." + methodName) != null) {
        
      } else {
        System.out.println("Function call " + methodName + " is not valid");
        Parser.getInstance().addSemanticError();
      }
    } else {
      String methodName = ((SimpleNode) children[0]).analyzeType(table) + ".";
      methodName += ((ASTIdentifier) children[1]).getName() + "(";
      if (((ASTArgumentCall) children[2]).children != null) {
        for (int i = 0; i < ((ASTArgumentCall) children[2]).children.length; i++) {
          methodName += ((SimpleNode) ((ASTArgumentCall) children[2]).children[i]).analyzeType(table);
          if (i != ((ASTArgumentCall) children[2]).children.length - 1)
            methodName += ",";
        }
      }
      methodName += ")";
      if (Parser.getInstance().getTable(methodName) != null) {

      } else {
        System.out.println("Function call " + methodName + " is not valid");
        Parser.getInstance().addSemanticError();
      }
    }
  }
}
/*
 * JavaCC - OriginalChecksum=e32282036d533f98d2bbaf06ba78b738 (do not edit this
 * line)
 */

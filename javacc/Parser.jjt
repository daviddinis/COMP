options
{
  LOOKAHEAD= 1;
  MULTI=true;
}

PARSER_BEGIN(Parser)

import java.io.FileNotFoundException;
import java.io.*;
import java.util.*;

public class Parser
{
  static public int labelCounter = 0;
  static private int errorCount = 10;
  static private int MAX_ERROR_COUNT = 10;
  static String className;
  static String extend;
  private static SymbolTable classTable = new SymbolTable();
  private ArrayList<String> types = new ArrayList<String>(Arrays.asList("Int", "Bool", "Int[]"));
  private HashMap<String, SymbolTable> methods = new HashMap<String, SymbolTable>();
  static private Parser instance;
  static boolean debug = false;
  static boolean varInitIgnore = false;

  public static int getAndIncLabel(){
    return labelCounter++;
  }

  public SymbolTable getclassTable(){
    return this.classTable;
  }

  static Parser getInstance(){
    return instance;
  }

  public void addMethod(String name, SymbolTable table){
    this.methods.put(name, table);
  }

  public void getKeys(){
    Set<String> met = methods.keySet();
    for(String key: met){
        System.out.println(key);
    }
  }

  public boolean checkType(String type) {
    return types.contains(type);
  } 

  public void addType(String type) {
    types.add(type);
  }

  public SymbolTable getTable(String id){
    return this.methods.get(id);
  }

  public void addSemanticError(){
    try {
      errorCount--;
      if (errorCount == 0) {
        throw new SemanticException();
      }
    } catch (SemanticException e) {
      System.out.println("Too much semantic errors found, exiting");
      System.exit(1);
    }
    
  }

  public static void main(String args []) throws ParseException, SemanticException
  {
    Parser parser = null;
    
    errorCount = MAX_ERROR_COUNT;

    int i = 0;
    while (args.length > i) {
      switch (args[i]) {
        case "-d":
          debug = true;
          break;
        case "-v":
          varInitIgnore = true;
          break;
        case "-o":
          // not implemented
          break;
        default:
          if (args[i].matches("-r=.*")) {
            // not implemented
          } else {
            try {
              java.io.FileInputStream file = new java.io.FileInputStream(new java.io.File(args[0]));
              parser = new Parser(file);
              instance = parser;
            } catch (FileNotFoundException e) {
              System.out.println(e);
              return;
            }
          }
          break;
      }
      i++;
    }

    if (parser == null) {
      parser = new Parser(System.in);
      instance = parser;
    }

    // -- Syntax Analysis --
    SimpleNode root = parser.Program();
    root.dump("");

    if(errorCount < 10){
      throw new ParseException();
    }

    // -- Semantic Analysis --
    root.createSymbolTable(parser.getclassTable());
      // static io.println(Int) function added
    SymbolTable ioTable = new SymbolTable();
    ioTable.setStatic(true);
    parser.addMethod("io.println(Int)", ioTable);
    parser.classTable.addSymbol(new Symbol("io", "io", Symbol.Access.global));

    if (debug) {
      System.out.println(parser.classTable.toString());
      System.out.println(parser.methods.toString());
    }

    root.analyzeSemantics(parser.getclassTable());

    if(errorCount < 10) {
      throw new SemanticException();
    }


    // -- Code Generation --
    CodeGenerator codeGenerator = new CodeGenerator(root, classTable);
    codeGenerator.generate();
  }
}

PARSER_END(Parser)

JAVACODE
void skipto(int type) {
  Token t;
  do {
    t = getNextToken();
  } while (t.kind != type && t.kind != EOF);
}

JAVACODE
void skipto_dont_consume(int type) {
  Token t;
  int next;
  boolean consume = false;
  do{
	  if(consume){
		  t = getNextToken();
    }
    next = getToken(1).kind;
	  consume = true;
  } while (next != type && next != EOF);
}

JAVACODE
void skip_all(int type) {
  Token t;
  int next;
  boolean consume = false;
  do {
    if (consume) t = getNextToken();
    next = getToken(1).kind;
    consume = true;
  } while(next == type);
}

JAVACODE
void skipto_while_expression() {
  skipto_dont_consume(RPAR);
  skip_all(RPAR);
}

JAVACODE
void printErrorMessage(ParseException e) {
  System.out.println("----- ERROR FOUND -----");
  System.out.println(e.currentToken.next.image + " Line " +
	e.currentToken.beginLine + " Column " +
	e.currentToken.beginColumn);

	System.out.println("EXPECTED TOKENS");

	for(int i = 0; i < e.expectedTokenSequences.length; i++) {
		for(int k = 0; k < e.expectedTokenSequences[i].length; k++) {
			System.out.println(tokenImage[e.expectedTokenSequences[i][k]]);
		}
	}
}

JAVACODE
void whileError(ParseException e) {
  errorCount--;
  printErrorMessage(e);
  if(errorCount == 0) {
    System.out.println("Error exit");
    System.exit(0);
  }
}

// Symbols that must be skipped during the lexical analysis
SKIP :
{
  " "
| "\t"
| "\r"
| "\n"
| < "//" (~[ "\n", "\r" ])*
    (
      "\n"
    | "\r"
    | "\r\n"
    ) >
| < "/*" (~[ "*" ])* "*"
    (
      "*"
    | ~[ "*", "/" ] (~[ "*" ])* "*"
    )*
    "/" >
}

// token definition (terminal symbols)
TOKEN :
{
  < ADD : "+" >
| < AND : "&&" >
| < BOOLEAN : "boolean" >
| < CLASS : "class" >
| < COMMA : "," >
| < DIV : "/" >
| < DOT : "." >
| < ELSE : "else" >
| < EQUALS : "=" >
| < EXTENDS : "extends" >
| < FALSE : "false" >
| < IF : "if" >
| < IMPORT : "import" >
| < INT : "int" >
| < INTEGERLITERAL : (["0"-"9"])+ >
| < LCURLY : "{" >
| < LENGTH : "length" >
| < LPAR : "(" >
| < LSQUARE : "[" >
| < MAIN : "main" >
| < LESSTHAN : "<" >
| < MUL : "*" >
| < NEW : "new" >
| < NOT : "!" >
| < PUBLIC : "public" >
| < RCURLY : "}" >
| < RETURN : "return" >
| < RPAR : ")" >
| < RSQUARE : "]" >
| < SEMICOLON : ";" >
| < STATIC : "static" >
| < STRING : "String" >
| < SUB : "-" >
| < THIS : "this" >
| < TRUE : "true" >
| < VOID : "void" >
| < WHILE : "while" >
| < IDENTIFIER :  ["A"-"Z","a"-"z","$","_"](["0"-"9","A"-"Z","a"-"z","_","$"])* >
}

SimpleNode Program() : {}
{
  ImportDeclarations() ClassDeclaration() <EOF>
  {
    return jjtThis;
  }
}

void ImportDeclarations() #void :
{}
{
  (
    Import()
  )*
}

void Import(): {Token t;}{
  <IMPORT> [<STATIC> {jjtThis.isStatic =true;}] Identifier() [<DOT>{jjtThis.dot = true;} Identifier() ] [ <LPAR> ParamList() <RPAR> [Type() {jjtThis.returnType =true;}| <VOID>#Void {jjtThis.returnType =true;}] ] <SEMICOLON>
}

void ParamList(): {}{
    [(Type() | <VOID>)  (<COMMA> (Type() | <VOID>))*]
}

void File() #void :
{}
{
  (
    [ < STATIC > #Static ] Identifier() (< DOT > Identifier())* [< LPAR > ArgumentImport() < RPAR >]
    (
      Type() | [ < VOID > #Void ]
    )
  )
}

void ArgumentImport()   :
{}
{
  [
    (Type() | <VOID>)
    (
      < COMMA > (Type() | <VOID>)
    )*
  ]
}

void ClassDeclaration()  :
{}
{
  < CLASS > Identifier() [ < EXTENDS > Identifier() #Extends(2)] < LCURLY >  VariableDeclarations() MethodDeclarations() < RCURLY >
}

void VariableDeclarations() #void  :
{}
{
  (
  LOOKAHEAD(2) Variable()
  )*
}

void Variable()  :
{}
{
  {jjtThis.setLine(getToken(1).beginLine); }
  Type() Identifier() < SEMICOLON >
}

void MethodDeclarations() #void  :
{}
{
  (
    GenericMethod()
  )*
}

void GenericMethod()  #void :
{}
{
  < PUBLIC >
  (
    Method()
  | 
    MainMethod()
  )
}

void Method()   :
{}
{
  Type() Identifier() < LPAR > ArgumentList() < RPAR > 
  < LCURLY > VariableDeclarations() StatementDeclarations() Return()
}

void Return(): {}
{
  {jjtThis.setLine(getToken(1).beginLine); }
  < RETURN > Expression() < SEMICOLON > < RCURLY >
}

void ArgumentList() #void  :
{}
{
  [
    Argument()
    (
      < COMMA > Argument()
    )*
  ]
}

void Argument() :
{}
{
  Type() Identifier()
}

void MainMethod() :
{}
{
  < STATIC > < VOID > < MAIN > < LPAR > < STRING > < LSQUARE > < RSQUARE > Identifier() < RPAR > 
  < LCURLY > VariableDeclarations() StatementDeclarations() < RCURLY >
}

void Type() #void :
{}
{
  (
    LOOKAHEAD(2) < INT > < LSQUARE > < RSQUARE > #IntArray
  | 
    < BOOLEAN > #Bool
  | 
    < INT > #Int
  | 
  Identifier()
  )
}

void StatementDeclarations()  :
{}
{
  (
    Statement()
  )*
}

void Statement() #void  :
{}
{ 
    (
      < LCURLY > StatementDeclarations() < RCURLY >
    | 
      If()
    | 
      While()
    |
     LOOKAHEAD(2) Equals()
    |
     Expression() <SEMICOLON>
    )

}

void If() : {}
{
  {jjtThis.setLine(getToken(1).beginLine); }
  < IF > < LPAR >  Expression() < RPAR > Then() Else()
}

void Then() :{}
{
  Statement() 
}

void Else() : {}
{
  < ELSE > Statement()
}


void Equals() : {}
{
  {jjtThis.setLine(getToken(1).beginLine); }
  Identifier()
    [< LSQUARE >  Expression() #IntArray(2)< RSQUARE >] < EQUALS > EqualsExpression() < SEMICOLON >
}

void EqualsExpression() #void : {}
{
  Expression() 
}

void While() #void : {}
{
  try{
    < WHILE > < LPAR > WhileExpression() < RPAR > 
  }
  catch(ParseException e) {
    System.out.println("While error detected");
    whileError(e); 
    skipto_while_expression(); 
  }
  WhileBody(){jjtThis.setLine(getToken(1).beginLine);jjtThis.setColumn(getToken(1).beginColumn);}#While(2)
}

void WhileExpression() :
{}
{
  {jjtThis.setLine(getToken(1).beginLine); }
  Expression()
}

void WhileBody() :
{}
{
  Statement()
}

void Expression()  #void :
{}
{
  Term1() ( LOOKAHEAD(2) And() {jjtThis.setLine(getToken(1).beginLine);jjtThis.setColumn(getToken(1).beginColumn);}#And(2) )*
}

void And() #void : {}
{
  < AND >  Term1()
}

void Term1() #void :
{}
{
  Term2() ( LOOKAHEAD(2) LessThan() {jjtThis.setLine(getToken(1).beginLine);jjtThis.setColumn(getToken(1).beginColumn-1);}#LessThan(2) )* 
}

void LessThan() #void : {}
{
  < LESSTHAN > Term2()
}

void Term2() #void :
{Token t;}
{
  Term3() (LOOKAHEAD(2) ( t=< ADD > | t=< SUB > ) Term3() {jjtThis.setOperator(t.image);}#AddSub(2) )*
}

void Term3()  #void :
{Token t;}
{
  Term6() (LOOKAHEAD(2) (  t=< MUL > | t=<DIV> ) Term6() {jjtThis.setOperator(t.image);}#MulDiv(2) ) *
}

void Term6() #void  :
{}
{
  (Term7() [ LOOKAHEAD(2) < LSQUARE > Expression() #IntArray(2) <RSQUARE> ]
  | < NOT >  Term8() {jjtThis.setLine(getToken(1).beginLine);jjtThis.setColumn(getToken(1).beginColumn-1);}#NOT(1)
  )
}

void Term7()#void   :
{}
{
  Term8()  [ LOOKAHEAD(2) < DOT > < LENGTH >  #LENGTH(1) ]
}

void Term8()  #void :
{}
{
  Term9()  [ LOOKAHEAD(2) < DOT >  Identifier() < LPAR > ArgumentCall() < RPAR > #function(3)]
}

void ArgumentCall() : {}
{
  [ Expression() ( < COMMA > Expression())* ]
}

void Term9() #void :
{}
{
  (
    IntLiteral() 
  | 
    < TRUE > #TRUE
  | 
    < FALSE > #FALSE
  | 
    < THIS > #THIS
  | 
    LOOKAHEAD(2) NewInt()
  | 
  < NEW > Identifier() < LPAR > ArgumentCall() < RPAR > #NewId(2)
  | 
    Par()
  |
    Identifier() 
  ) 
}

void IntLiteral() : {Token t;}
{
  t=< INTEGERLITERAL > { jjtThis.jjtSetValue(t.image); }
}

void Identifier() : {Token t;}
{
  {jjtThis.setLine(getToken(1).beginLine); }
  t=< IDENTIFIER > { jjtThis.jjtSetValue(t.image); }
}

void NewInt() : {}
{
  < NEW > < INT > < LSQUARE >  Expression() < RSQUARE >
}

void Par() #void: {}
{
  < LPAR > Expression() < RPAR >
}